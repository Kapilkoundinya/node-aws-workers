// Manage SSH keys we use to access machines we spin up in AWS

'use strict';

const prettyjson = require('prettyjson');

const keys = require('../keys');
const instances = require('../instances');
const s3 = require('../s3');

function output() {
  return (err, data) => {
    if (err) {
      console.error(err);
      return;
    }
    console.log(prettyjson.render(data, {}));
  };
}

function main(args) {
  if (!args.length) {
    console.log('show-key           show currently active private key\n' +
                'list-keys          list all SSH2 keys that were generated by this module (active and otherwise)\n' +
                'cleanup-keys       remove all currently active keys (remaining instances will have to be killed by hand!)\n' +
                'list-instances     list all instances that were launched with the currently active private key\n' +
                'cleanup-instances  shut down all instances that were generated by this module (will shut down other user\'s machines too!)\n' +
                'list-buckets       show all s3 buckets that were generated by this module\n' +
                'ensure-bucket X    make sure a bucket with the name "X" exists (a prefix will be added)\n' +
                'delete-bucket X    delete bucket "X" (only works if it was created by this module)\n');
    return -1;
  }

  let cmd = args[0];
  for (let i = 0; ((i = cmd.indexOf('-')) !== -1); ) {
    cmd = cmd.substr(0, i) + cmd[i+1].toUpperCase() + cmd.substr(i+2);
  }
  if (cmd === 'showKey')
    cmd = 'loadOrCreateKey';
  let obj;
  [keys, instances, s3].forEach(mod => {
    if (cmd in mod)
      obj = mod;
  });
  if (!obj) {
    console.log('unknown command: ' + args[0]);
    return -1;
  }
  if (cmd === 'ensureBucket' || cmd === 'deleteBucket') {
    obj[cmd](args[1], output());
  } else {
    obj[cmd](output());
  }
  return 0;
}

main(process.argv.slice(2));

/*
// list all keys taht have our PREFIX
function listKeys(callback) {
  ec2.describeKeyPairs({}, (err, data) => {
    if (err)
      throw err;
    callback(data.KeyPairs.filter(key => key.KeyName.indexOf(PREFIX) === 0));
  });
}

// cleanup any keys we created in the past
function cleanupKeys() {
  listKeys(keys => keys.forEach(key => {
    console.log('delete leftover key ' + key.KeyName);
    deleteKey(key.KeyName);
  }));
}

// if we don't have a keyfile, create a new key
function loadOrCreateKey(callback) {
  try {
    let storedKey = JSON.parse(fs.readFileSync(KEYFILE));
    listKeys(keys => {
      if (!keys.some(key => key.KeyName === storedKey.KeyName)) {
        console.log('SSH key ' + storedKey.KeyName + ' vanished, recreating a new key');
        fs.unlinkSync(KEYFILE);
        loadOrCreateKey(callback);
        return;
      }
      callback(storedKey);
    });
  } catch (e) {
    createKey(data => {
      console.log('created new SSH key ' + data.KeyName + ', storing in ' + KEYFILE);
      fs.writeFileSync(KEYFILE, JSON.stringify(data), { flags: 'w+' });
      loadOrCreateKey(callback);
    });
  }
}

module.exports = {
  listKeys: listKeys,
  loadOrCreateKey: loadOrCreateKey,
  cleanupKeys: cleanupKeys,
};


*/
