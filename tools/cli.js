// Manage SSH keys we use to access machines we spin up in AWS

'use strict';

const prettyjson = require('prettyjson');

const keys = require('../keys');
const instances = require('../instances');

function output() {
  return (err, data) => {
    if (err) {
      console.error(err);
      return;
    }
    console.log(prettyjson.render(data, {}));
  };
}

function main(args) {
  if (!args.length) {
    console.log('list-keys list all SSH2 keys that were generated by this module (active and otherwise)\n' +
                'list-instances list all instances that were launched with the currently active private key');
    return -1;
  }

  switch (args[0]) {
  case 'list-keys':
    keys.listKeys(output());
    return 0;
  case 'list-instances':
    instances.listInstances(output());
    return 0;
  default:
    console.log('unknown command: ' + args[0]);
    return -1;
  }
}

main(process.argv.slice(2));

/*
// list all keys taht have our PREFIX
function listKeys(callback) {
  ec2.describeKeyPairs({}, (err, data) => {
    if (err)
      throw err;
    callback(data.KeyPairs.filter(key => key.KeyName.indexOf(PREFIX) === 0));
  });
}

// cleanup any keys we created in the past
function cleanupKeys() {
  listKeys(keys => keys.forEach(key => {
    console.log('delete leftover key ' + key.KeyName);
    deleteKey(key.KeyName);
  }));
}

// if we don't have a keyfile, create a new key
function loadOrCreateKey(callback) {
  try {
    let storedKey = JSON.parse(fs.readFileSync(KEYFILE));
    listKeys(keys => {
      if (!keys.some(key => key.KeyName === storedKey.KeyName)) {
        console.log('SSH key ' + storedKey.KeyName + ' vanished, recreating a new key');
        fs.unlinkSync(KEYFILE);
        loadOrCreateKey(callback);
        return;
      }
      callback(storedKey);
    });
  } catch (e) {
    createKey(data => {
      console.log('created new SSH key ' + data.KeyName + ', storing in ' + KEYFILE);
      fs.writeFileSync(KEYFILE, JSON.stringify(data), { flags: 'w+' });
      loadOrCreateKey(callback);
    });
  }
}

module.exports = {
  listKeys: listKeys,
  loadOrCreateKey: loadOrCreateKey,
  cleanupKeys: cleanupKeys,
};


*/
